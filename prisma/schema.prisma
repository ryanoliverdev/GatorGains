generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String         @id @default(cuid())
  name               String
  email              String?        @unique
  username           String?        @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  bio                String?
  dailyCalorieIntake Int            @default(2000)
  streak             Int            @default(0)
  xp                 Int            @default(0)
  groups             Group[]
  workouts           Workout[]
  accounts           Account[]
  sessions           Session[]
  dailyFoodLogs      DailyFoodLog[]
  friends            Friend[]       @relation("UserFriends")
  friendsOfUser      Friend[]       @relation("UserFriendships")
  exercises          Exercise[]
  Message            Message[]
}

model Group {
  id              String    @id @default(cuid())
  name            String    @unique
  emojiLogo       String    @default("üèãÔ∏è")
  description     String?
  groupXp         Int       @default(0)
  messages        Message[]
  users           User[]
  groupLeaderId   String
  groupLeaderName String

  @@index([name])
  @@index([description])
}

model Message {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  usersName String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@index([groupId])
  @@index([userId])
}

model Friend {
  id       String @id @default(cuid())
  user     User   @relation("UserFriends", fields: [userId], references: [id])
  userId   String
  friend   User   @relation("UserFriendships", fields: [friendId], references: [id])
  friendId String

  @@unique([userId, friendId])
  @@index([friendId])
}

model Workout {
  id            String          @id @default(cuid())
  workoutName   String?         @unique
  userId        String
  workoutDate   String
  user          User            @relation(fields: [userId], references: [id])
  ExerciseEntry ExerciseEntry[]

  @@index([userId])
}

model ExerciseEntry {
  id           String   @id @default(cuid())
  workoutId    String
  exerciseName String
  workout      Workout  @relation(fields: [workoutId], references: [id])
  exercise     Exercise @relation(fields: [exerciseName], references: [exerciseName])

  @@index([workoutId])
  @@index([exerciseName])
}

model Exercise {
  id            String          @id @default(cuid())
  userId        String
  exerciseName  String          @unique
  difficulty    String?
  type          String?
  sets          String?
  duration_reps String?
  muscle        String?
  equipment     String?
  description   String?
  weight        Int?
  user          User            @relation(fields: [userId], references: [id])
  ExerciseEntry ExerciseEntry[]

  @@index([userId])
}

model DailyFoodLog {
  id        String      @id @default(cuid())
  userId    String
  date      String
  user      User        @relation(fields: [userId], references: [id])
  FoodEntry FoodEntry[]

  @@unique([userId, date], name: "userId_date")
  @@index([userId])
}

model FoodItem {
  id          String      @id @default(cuid())
  foodName    String      @unique
  calories    Int
  protein     Int
  carbs       Int
  fat         Int
  foodEntries FoodEntry[]

  @@index([foodName])
}

model FoodEntry {
  id             String       @id @default(cuid())
  dailyFoodLogId String
  foodItemId     String
  servingSize    Int          @default(1)
  dailyFoodLog   DailyFoodLog @relation(fields: [dailyFoodLogId], references: [id])
  foodItem       FoodItem     @relation(fields: [foodItemId], references: [id])

  @@index([dailyFoodLogId])
  @@index([foodItemId])
}
