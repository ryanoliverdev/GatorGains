generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String?        @unique
  username      String?        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?
  dailyCalorieIntake Int            @default(2000)
  streak        Int            @default(0)
  workouts      Workout[]
  accounts      Account[]
  sessions      Session[]
  dailyFoodLogs DailyFoodLog[]
  friends Friend[] @relation("UserFriends")
  friendsOfUser Friend[] @relation("UserFriendships")
}

model Friend {
  id String @id @default(cuid())
  user User @relation("UserFriends", fields: [userId], references: [id])
  userId String
  friend User @relation("UserFriendships", fields: [friendId], references: [id])
  friendId String

  @@unique([userId, friendId])
  @@index([friendId])
}

model Workout {
  id             String   @id @default(cuid())
  userId         String
  workoutDate    DateTime
  workoutType    String?
  duration       Int?
  user           User     @relation(fields: [userId], references: [id])
  stats          Stat[]
  caloriesBurned Int?

  @@index([userId])
}

model Stat {
  id           String  @id @default(cuid())
  workoutId    String
  exerciseName String?
  reps         Int?
  sets         Int?
  weightLifted Int?
  workout      Workout @relation(fields: [workoutId], references: [id])

  @@index([workoutId])
}

model DailyFoodLog {
  id        String      @id @default(cuid())
  userId    String
  date      String    @unique
  user      User        @relation(fields: [userId], references: [id])
  FoodEntry FoodEntry[]

  @@index([userId])
}

model FoodItem {
  id             String       @id @default(cuid())
  foodName       String       @unique
  calories       Int
  protein        Int
  carbs          Int
  fat            Int
  foodEntries    FoodEntry[]

  @@index([foodName])
}

model FoodEntry {
  id             String       @id @default(cuid())
  dailyFoodLogId String
  foodItemId     String
  servingSize    Int          @default(1)
  dailyFoodLog   DailyFoodLog @relation(fields: [dailyFoodLogId], references: [id])
  foodItem       FoodItem     @relation(fields: [foodItemId], references: [id])

  @@index([dailyFoodLogId])
  @@index([foodItemId])
}
